"""create comments table

Revision ID: 11d3cbee282d
Revises: 1c319e39f15c
Create Date: 2025-07-17 18:24:18.738187

"""
from alembic import op
import sqlalchemy as sa
import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")

# revision identifiers, used by Alembic.
revision = '11d3cbee282d'
down_revision = '1c319e39f15c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    table_args = {}
    if environment == "production":
        table_args["schema"] = SCHEMA
        expenses_fk = sa.ForeignKey(f"{SCHEMA}.expenses.id", ondelete='CASCADE')
        users_fk = sa.ForeignKey(f"{SCHEMA}.users.id", ondelete='CASCADE')
    else:
        expenses_fk = sa.ForeignKey("expenses.id", ondelete='CASCADE')
        users_fk = sa.ForeignKey("users.id", ondelete='CASCADE')

    op.create_table(
        'comments',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('expense_id', sa.Integer(), expenses_fk, nullable=False),
        sa.Column('user_id', sa.Integer(), users_fk, nullable=False),
        sa.Column('content', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime()),
        sa.Column('updated_at', sa.DateTime()),
        **table_args
    )


    # if environment == "production":
    #     op.execute(f"ALTER TABLE comments SET SCHEMA {SCHEMA};")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # op.drop_table('comments')
    # ### end Alembic commands ###
    table_args = {}
    if environment == "production":
        table_args["schema"] = SCHEMA

    op.drop_table('comments', **table_args)
